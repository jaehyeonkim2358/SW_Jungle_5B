import sys
from collections import defaultdict
sys.stdin = open('input.txt', 'r')
input = sys.stdin.readline

T = int(input())

for _ in range(T):
    coin_num = int(input())
    coins = list(map(int, input().split()))
    price = int(input())
    dp = {i: 0 for i in range(price+1)}
    dp[0] = 1
    # 어떤 동전을 쓰던 0원을 만들 수 있는 가짓수는 1개이다. 0개 쓰면 0원 되잖아>?
    for coin in coins:
        # 동전 별로 개수를 누적시키기 위해.
        for i in range(price+1):
            if i >= coin:
                # 예를들어 3원으로 만들 수 있는건 3원부터니까, 적어도 본인 동전보단 가치가 높아가 가짓수를 확인할 수 있다.
                dp[i] += dp[i - coin]
                # 2원과 3원을 가지고 5원을 만든다고 생각해보자.
                # 먼저 2원만 가지고 5원을 만드는 갯수는 0개이다.
                # 3원만 가지고 5원을 만드는 갯수도 0개이다.
                # 하지만 2원과 3원을 가지고 5원을 만든다고 할때 5원에서 3원을 빼면 결국 2원으로 2원을 만드는 가짓수하고 똑같을 것이고
                # 2원을 빼면 3원으로 3원을 만드는 가짓수하고 똑같을 것이다. 그러한 원리로 누적계산을 하는 것이다.
                # 결국 2원과 3원을 만드는 가짓수를 알게되면 굳이 추가 계산을 할 필요 없이 기존에 계산한 값을 dp테이블에 저장해서
                # 필요할 때 꺼내쓰는 것이다.
    print(dp[price])

    # 내가 이해가 잘 안갔어서 추가 설명을 하자면.
    # 먼저 coin 반목문에서 2원이 먼저 들어갈 것이다.
    # dp[2]에서 2원을 빼면 결국 0원을 만드는 가짓수하고 똑같을 것이므로 가짓수가 1이 될 것이고,
    # dp[3]에서 2원을 빼면 결국 2원으로 1원을 만드는 가짓수하고 똑같을 것이므로 가짓수가 0이 될 것이다.
    # dp[4]에서 2원을 빼면 2원을 만드는 가짓수하고 똑같을 것이므로 dp[4-2 = 2]의 값인 1이 될 것이다.
    # dp[5]를 보면 5원에서 2원을 빼면 결국 2원으로 3원을 만드는 것과 동일할 것이므로 dp[5-2 = 3]인 0개의 가짓수가 될 것이다.

    # 어쨌든 계속 돌다가 3원도 넣는다고 생각해보자.
    # 우리는 2원과 3원을 다 사용하기 때문에 누적해서 계산하여야 한다.
    # 그리고 3원으로 계산할 때 의미가 있는건 3원부터이기 때문에 coin의 금액보다 클때만 반목문을 돌리도록 한다.
    # 먼저 dp[3]을 보면 dp[3-3 =0] 3원으로 0원을 만드는 가짓수는 1개이고 기존에 dp[3]의 가짓수인 0에 추가로 더해서 1개로 만들어준다.
    # dp[5]를 보자. dp[5-3]을 빼면 dp[2]와 같다. 그 말은 3원을 빼면 결국 2원으로 2원을 만드는 가짓수와 똑같다는 의미이다.
    # 따라서 dp[5-3 = 2] > 1이 되고 이 값을 누적해서 더해주면 된다.

    # 이러한 논리를 적용해서 만든 점화식이 결국 dp[i(만드려는 금액 M)] = dp[i-k(현재 계산하는 동전의 금액)]이 되는 것이다.
